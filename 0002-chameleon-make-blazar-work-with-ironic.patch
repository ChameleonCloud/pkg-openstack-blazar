diff --git a/climate/plugins/oshosts/host_plugin.py b/climate/plugins/oshosts/host_plugin.py
index 838fa87..8fb455c 100644
--- a/climate/plugins/oshosts/host_plugin.py
+++ b/climate/plugins/oshosts/host_plugin.py
@@ -87,6 +87,7 @@ class PhysicalHostPlugin(base.BasePlugin, nova.NovaClientWrapper):
             values['end_date'],
         )
         if not host_ids:
+            pool.delete(pool_name)
             raise manager_ex.NotEnoughHostsAvailable()
         for host_id in host_ids:
             db_api.host_allocation_create({'compute_host_id': host_id,
@@ -184,12 +185,16 @@ class PhysicalHostPlugin(base.BasePlugin, nova.NovaClientWrapper):
             pool = rp.ReservationPool()
             for allocation in allocations:
                 db_api.host_allocation_destroy(allocation['id'])
-                if self.nova.hypervisors.get(
+                hyp = self.nova.hypervisors.get(
                         self._get_hypervisor_from_name_or_id(
                         allocation['compute_host_id'])
-                ).__dict__['running_vms'] == 0:
-                    pool.delete(reservation['resource_id'])
-                # TODO(frossigneux) Kill, migrate, or increase fees...
+                )
+                if hyp.__dict__['running_vms'] > 0:
+                    hyp = self.nova.hypervisors.search(hyp.__dict__['hypervisor_hostname'], servers=True)
+                    for server in hyp[0].__dict__['servers']:
+                        s = self.nova.servers.get(server['uuid'])
+                        s.delete()
+            pool.delete(reservation['resource_id'])
 
     def _get_extra_capabilities(self, host_id):
         extra_capabilities = {}
diff --git a/climate/utils/openstack/nova.py b/climate/utils/openstack/nova.py
index 3d8a948..43d5d54 100644
--- a/climate/utils/openstack/nova.py
+++ b/climate/utils/openstack/nova.py
@@ -31,7 +31,16 @@ nova_opts = [
                help='Nova name in keystone'),
     cfg.StrOpt('image_prefix',
                default='reserved_',
-               help='Prefix for VM images if you want to create snapshots')
+               help='Prefix for VM images if you want to create snapshots'),
+    cfg.StrOpt('climate_username',
+               default='climate_admin',
+               help='Name of the user for write operations'),
+    cfg.StrOpt('climate_password',
+               default='climate_password',
+               help='Password of the user for write operations'),
+    cfg.StrOpt('climate_project_name',
+               default='admin',
+               help='Project of the user for write operations')
 ]
 
 CONF = cfg.CONF
@@ -73,11 +82,13 @@ class ClimateNovaClient(object):
         auth_token = kwargs.pop('auth_token', None)
         mgmt_url = kwargs.pop('mgmt_url', None)
 
-        if ctx is None:
-            try:
-                ctx = context.current()
-            except RuntimeError:
-                pass
+        # Don't use existing context so that we can use admin credentials instead
+        #if ctx is None:
+        #    try:
+        #        ctx = context.current()
+        #        print "!!!! set ctx to " + str(ctx)
+        #    except RuntimeError:
+        #        pass
         kwargs.setdefault('version', cfg.CONF.nova_client_version)
         if ctx is not None:
             kwargs.setdefault('username', ctx.user_name)
@@ -135,9 +146,7 @@ class ServerManager(servers.ServerManager):
 class NovaClientWrapper(object):
     @property
     def nova(self):
-        ctx = context.current()
-        nova = ClimateNovaClient(username=ctx.user_name,
-                                 api_key=None,
-                                 project_id=ctx.project_id,
-                                 ctx=ctx)
+        nova = ClimateNovaClient(username=CONF.climate_username,
+                                 api_key=CONF.climate_password,
+                                 project_id=CONF.climate_project_name)
         return nova
